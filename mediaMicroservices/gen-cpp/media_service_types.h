/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef media_service_TYPES_H
#define media_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace media_service {

struct ErrorCode {
  enum type {
    SE_THRIFT_CONNPOOL_TIMEOUT = 0,
    SE_THRIFT_CONN_ERROR = 1,
    SE_UNAUTHORIZED = 2,
    SE_MEMCACHED_ERROR = 3,
    SE_MONGODB_ERROR = 4,
    SE_REDIS_ERROR = 5,
    SE_DYNAMODB_ERROR = 6,
    SE_COUCHDB_ERROR = 7,
    SE_THRIFT_HANDLER_ERROR = 8
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

std::string to_string(const ErrorCode::type& val);

class User;

class Review;

class CastInfo;

class Cast;

class MovieInfo;

class Page;

class ServiceException;

typedef struct _User__isset {
  _User__isset() : user_id(false), first_name(false), last_name(false), username(false), password(false), salt(false) {}
  bool user_id :1;
  bool first_name :1;
  bool last_name :1;
  bool username :1;
  bool password :1;
  bool salt :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() noexcept;

  virtual ~User() noexcept;
  int64_t user_id;
  std::string first_name;
  std::string last_name;
  std::string username;
  std::string password;
  std::string salt;

  _User__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_first_name(const std::string& val);

  void __set_last_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_salt(const std::string& val);

  bool operator == (const User & rhs) const;
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

std::ostream& operator<<(std::ostream& out, const User& obj);

typedef struct _Review__isset {
  _Review__isset() : review_id(false), user_id(false), req_id(false), text(false), movie_id(false), rating(false), timestamp(false) {}
  bool review_id :1;
  bool user_id :1;
  bool req_id :1;
  bool text :1;
  bool movie_id :1;
  bool rating :1;
  bool timestamp :1;
} _Review__isset;

class Review : public virtual ::apache::thrift::TBase {
 public:

  Review(const Review&);
  Review& operator=(const Review&);
  Review() noexcept;

  virtual ~Review() noexcept;
  int64_t review_id;
  int64_t user_id;
  int64_t req_id;
  std::string text;
  std::string movie_id;
  int32_t rating;
  int64_t timestamp;

  _Review__isset __isset;

  void __set_review_id(const int64_t val);

  void __set_user_id(const int64_t val);

  void __set_req_id(const int64_t val);

  void __set_text(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_rating(const int32_t val);

  void __set_timestamp(const int64_t val);

  bool operator == (const Review & rhs) const;
  bool operator != (const Review &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Review & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Review &a, Review &b);

std::ostream& operator<<(std::ostream& out, const Review& obj);

typedef struct _CastInfo__isset {
  _CastInfo__isset() : cast_info_id(false), name(false), gender(false), intro(false) {}
  bool cast_info_id :1;
  bool name :1;
  bool gender :1;
  bool intro :1;
} _CastInfo__isset;

class CastInfo : public virtual ::apache::thrift::TBase {
 public:

  CastInfo(const CastInfo&);
  CastInfo& operator=(const CastInfo&);
  CastInfo() noexcept;

  virtual ~CastInfo() noexcept;
  int64_t cast_info_id;
  std::string name;
  bool gender;
  std::string intro;

  _CastInfo__isset __isset;

  void __set_cast_info_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_gender(const bool val);

  void __set_intro(const std::string& val);

  bool operator == (const CastInfo & rhs) const;
  bool operator != (const CastInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CastInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CastInfo &a, CastInfo &b);

std::ostream& operator<<(std::ostream& out, const CastInfo& obj);

typedef struct _Cast__isset {
  _Cast__isset() : cast_id(false), character(false), cast_info_id(false) {}
  bool cast_id :1;
  bool character :1;
  bool cast_info_id :1;
} _Cast__isset;

class Cast : public virtual ::apache::thrift::TBase {
 public:

  Cast(const Cast&);
  Cast& operator=(const Cast&);
  Cast() noexcept;

  virtual ~Cast() noexcept;
  int32_t cast_id;
  std::string character;
  int64_t cast_info_id;

  _Cast__isset __isset;

  void __set_cast_id(const int32_t val);

  void __set_character(const std::string& val);

  void __set_cast_info_id(const int64_t val);

  bool operator == (const Cast & rhs) const;
  bool operator != (const Cast &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cast & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cast &a, Cast &b);

std::ostream& operator<<(std::ostream& out, const Cast& obj);

typedef struct _MovieInfo__isset {
  _MovieInfo__isset() : movie_id(false), title(false), casts(false), plot_id(false), thumbnail_ids(false), photo_ids(false), video_ids(false), avg_rating(false), num_rating(false) {}
  bool movie_id :1;
  bool title :1;
  bool casts :1;
  bool plot_id :1;
  bool thumbnail_ids :1;
  bool photo_ids :1;
  bool video_ids :1;
  bool avg_rating :1;
  bool num_rating :1;
} _MovieInfo__isset;

class MovieInfo : public virtual ::apache::thrift::TBase {
 public:

  MovieInfo(const MovieInfo&);
  MovieInfo& operator=(const MovieInfo&);
  MovieInfo() noexcept;

  virtual ~MovieInfo() noexcept;
  std::string movie_id;
  std::string title;
  std::vector<Cast>  casts;
  int64_t plot_id;
  std::vector<std::string>  thumbnail_ids;
  std::vector<std::string>  photo_ids;
  std::vector<std::string>  video_ids;
  double avg_rating;
  int32_t num_rating;

  _MovieInfo__isset __isset;

  void __set_movie_id(const std::string& val);

  void __set_title(const std::string& val);

  void __set_casts(const std::vector<Cast> & val);

  void __set_plot_id(const int64_t val);

  void __set_thumbnail_ids(const std::vector<std::string> & val);

  void __set_photo_ids(const std::vector<std::string> & val);

  void __set_video_ids(const std::vector<std::string> & val);

  void __set_avg_rating(const double val);

  void __set_num_rating(const int32_t val);

  bool operator == (const MovieInfo & rhs) const;
  bool operator != (const MovieInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovieInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MovieInfo &a, MovieInfo &b);

std::ostream& operator<<(std::ostream& out, const MovieInfo& obj);

typedef struct _Page__isset {
  _Page__isset() : movie_info(false), reviews(false), cast_infos(false), plot(false) {}
  bool movie_info :1;
  bool reviews :1;
  bool cast_infos :1;
  bool plot :1;
} _Page__isset;

class Page : public virtual ::apache::thrift::TBase {
 public:

  Page(const Page&);
  Page& operator=(const Page&);
  Page() noexcept;

  virtual ~Page() noexcept;
  MovieInfo movie_info;
  std::vector<Review>  reviews;
  std::vector<CastInfo>  cast_infos;
  std::string plot;

  _Page__isset __isset;

  void __set_movie_info(const MovieInfo& val);

  void __set_reviews(const std::vector<Review> & val);

  void __set_cast_infos(const std::vector<CastInfo> & val);

  void __set_plot(const std::string& val);

  bool operator == (const Page & rhs) const;
  bool operator != (const Page &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Page & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Page &a, Page &b);

std::ostream& operator<<(std::ostream& out, const Page& obj);

typedef struct _ServiceException__isset {
  _ServiceException__isset() : errorCode(false), message(false) {}
  bool errorCode :1;
  bool message :1;
} _ServiceException__isset;

class ServiceException : public ::apache::thrift::TException {
 public:

  ServiceException(const ServiceException&);
  ServiceException& operator=(const ServiceException&);
  ServiceException() noexcept;

  virtual ~ServiceException() noexcept;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type errorCode;
  std::string message;

  _ServiceException__isset __isset;

  void __set_errorCode(const ErrorCode::type val);

  void __set_message(const std::string& val);

  bool operator == (const ServiceException & rhs) const;
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(ServiceException &a, ServiceException &b);

std::ostream& operator<<(std::ostream& out, const ServiceException& obj);

} // namespace

#endif
